import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export async function createAlbum(nome, descricao) {
  return await prisma.album.create({
    data: {
      nome,
      descricao,
    },
  });
}

export const getAlbuns = async () => {
  try {
    const albuns = await prisma.album.findMany({
      include: { midias: true }, // Inclui as m√≠dias associadas
    }); 
    return albuns; // Retorna os √°lbuns encontrados
  } catch (error) {
    console.error('Erro ao buscar √°lbuns:', error);
    throw error; // Lan√ßa o erro para ser tratado na rota
  }
};

export async function atualizarMidiasDoAlbum(albumId, midias) {
  try {
    console.log("üîπ Fun√ß√£o atualizarMidiasDoAlbum chamada!");
    console.log("üîπ √Ålbum ID:", albumId);
    console.log("üîπ M√≠dias recebidas:", midias);

    if (!Array.isArray(midias)) {
      throw new Error("üö® O par√¢metro 'midias' n√£o √© um array!");
    }

    const albumExiste = await prisma.album.findUnique({
      where: { id: albumId },
      include: { midias: true },
    });

    if (!albumExiste) {
      console.log("üö® √Ålbum n√£o encontrado no banco!");
      throw new Error('√Ålbum n√£o encontrado.');
    }

    console.log("‚úÖ √Ålbum encontrado:", albumExiste);
    let updateData = {};

    if (midias.length > 0) {
      // Se houver m√≠dias, faz a conex√£o
      const midiasNovas = midias.map(midia => ({ id: midia.id }));
      console.log("üîπ M√≠dias formatadas para o Prisma:", midiasNovas);
      updateData.midias = { connect: midiasNovas };
    } else {
      // Se n√£o houver m√≠dias, faz o disconnect
      console.log("üîπ Desconectando todas as m√≠dias:", albumExiste.midias.map(midia => midia.id));
      updateData.midias = { disconnect: albumExiste.midias.map(midia => ({ id: midia.id })) };
    }
    

    const albumAtualizado = await prisma.album.update({
      where: { id: albumId },
      data: updateData,
      include: { midias: true },
    });
    
    console.log("‚úÖ √Ålbum atualizado com as m√≠dias:", albumAtualizado.midias); // Verifique as m√≠dias no retorno    
    return albumAtualizado;

  } catch (error) {
    console.error('‚ùå Erro ao associar m√≠dias:', error);
    throw new Error('Erro ao atualizar m√≠dias do √°lbum.');
  }
}



export default { createAlbum,getAlbuns,atualizarMidiasDoAlbum };